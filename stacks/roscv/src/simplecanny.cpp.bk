#include <ros/ros.h>
#include <stdio.h>
#include <iostream>
#include <iomanip>
#include "std_msgs/String.h"
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv/cv.h>
#include <opencv/highgui.h>
#include <cv_bridge/CvBridge.h>
#include <cvaux.h>
#include <math.h>
#include <cxcore.h>
#include <highgui.h>
#include <cvblob.h>

using namespace std;
using namespace cv;
using namespace cvb;

namespace enc = sensor_msgs::image_encodings;
 
static const char WINDOW[] = "Image window";
 
class simplecanny
{
  ros::NodeHandle nh_;
  ros::NodeHandle n;
  ros::Publisher pub ;
  image_transport::ImageTransport it_;    
  image_transport::Subscriber image_sub_; //image subscriber 
  image_transport::Publisher image_pub_; //image publisher(we subscribe to ardrone image_raw)
  std_msgs::String msg;
  
public:
 simplecanny()
    : it_(nh_)
  {
 
     image_sub_ = it_.subscribe("/ardrone/image_raw", 1, &simplecanny::imageCb, this);
     image_pub_= it_.advertise("/arcv/Image",1);
 
 
  }
 
  ~simplecanny()
  {
    cv::destroyWindow(WINDOW);
  }
 
  void imageCb(const sensor_msgs::ImageConstPtr& msg)
  {
	//Structure to hold blobs
	CvBlobs blobs;	
	
	CvTracks tracks;	
		
     sensor_msgs::CvBridge bridge;//we need this object bridge for facilitating conversion from ros-img to opencv
		IplImage* img = bridge.imgMsgToCv(msg,"bgr8");  //image being converted from ros to opencv using cvbridge
		CvSize imgSize = cvGetSize(img);
		IplImage* frame = cvCreateImage(imgSize, img->depth, img->nChannels);
		IplConvKernel* morphKernel = cvCreateStructuringElementEx(5, 5, 1, 1,
			CV_SHAPE_RECT, NULL);
		
			cvConvertScale(img, frame, 1, 0);
			IplImage* segmentated = cvCreateImage(imgSize, 8, 1);
			
			// Detecting red pixels:
			for (unsigned int j = 0; j < imgSize.height; j++)
				for (unsigned int i = 0; i < imgSize.width; i++) {
					CvScalar c = cvGet2D(frame, j, i);

					double b = ((double) c.val[0]) / 255.;
					double g = ((double) c.val[1]) / 255.;
					double r = ((double) c.val[2]) / 255.;
					unsigned char f = 255 * ((r > 0.2 + g) && (r > 0.2 + b));

					cvSet2D(segmentated, j, i, CV_RGB(f, f, f));
				}
				
			cvMorphologyEx(segmentated, segmentated, NULL, morphKernel, CV_MOP_OPEN,
				1);
				
			IplImage* labelImg = cvCreateImage(cvGetSize(frame), IPL_DEPTH_LABEL,
				1);	
				
			unsigned int result = cvLabel(segmentated, labelImg, blobs);
			
			cvFilterByArea(blobs, 500, 1000000);
			cvRenderBlobs(labelImg, blobs, frame, frame,
			CV_BLOB_RENDER_BOUNDING_BOX);
			
			cvUpdateTracks(blobs, tracks, 200., 5);

			for (CvBlobs::const_iterator it=blobs.begin(); it!=blobs.end(); ++it)
			{
				std::cout << "Tinggi Blob = " << (it->second->maxy - it->second->miny )<< std::endl;
			}

			cvRenderTracks(tracks, frame, frame, 0 | CV_TRACK_RENDER_BOUNDING_BOX);

			cvShowImage("red_object_tracking", frame);
			
			cvWaitKey(2);  

}
};
 
int main(int argc, char** argv)
{
  ros::init(argc, argv, "simple_canny");
  simplecanny ic;
  ros::spin();
 
  return 0;
}
