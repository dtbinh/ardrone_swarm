/* Auto-generated by genmsg_cpp for file /home/futuhal57/ros/stacks/ardrone_pose_estimation/msg/KeyCode.msg */
#ifndef ARDRONE_POSE_ESTIMATION_MESSAGE_KEYCODE_H
#define ARDRONE_POSE_ESTIMATION_MESSAGE_KEYCODE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ardrone_pose_estimation
{
template <class ContainerAllocator>
struct KeyCode_ {
  typedef KeyCode_<ContainerAllocator> Type;

  KeyCode_()
  : data(0)
  {
  }

  KeyCode_(const ContainerAllocator& _alloc)
  : data(0)
  {
  }

  typedef uint8_t _data_type;
  uint8_t data;


  typedef boost::shared_ptr< ::ardrone_pose_estimation::KeyCode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ardrone_pose_estimation::KeyCode_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct KeyCode
typedef  ::ardrone_pose_estimation::KeyCode_<std::allocator<void> > KeyCode;

typedef boost::shared_ptr< ::ardrone_pose_estimation::KeyCode> KeyCodePtr;
typedef boost::shared_ptr< ::ardrone_pose_estimation::KeyCode const> KeyCodeConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ardrone_pose_estimation::KeyCode_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ardrone_pose_estimation::KeyCode_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ardrone_pose_estimation

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ardrone_pose_estimation::KeyCode_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ardrone_pose_estimation::KeyCode_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ardrone_pose_estimation::KeyCode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1bf77f25acecdedba0e224b162199717";
  }

  static const char* value(const  ::ardrone_pose_estimation::KeyCode_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1bf77f25acecdedbULL;
  static const uint64_t static_value2 = 0xa0e224b162199717ULL;
};

template<class ContainerAllocator>
struct DataType< ::ardrone_pose_estimation::KeyCode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ardrone_pose_estimation/KeyCode";
  }

  static const char* value(const  ::ardrone_pose_estimation::KeyCode_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ardrone_pose_estimation::KeyCode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "char data\n\
\n\
";
  }

  static const char* value(const  ::ardrone_pose_estimation::KeyCode_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ardrone_pose_estimation::KeyCode_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ardrone_pose_estimation::KeyCode_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct KeyCode_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ardrone_pose_estimation::KeyCode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ardrone_pose_estimation::KeyCode_<ContainerAllocator> & v) 
  {
    s << indent << "data: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.data);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARDRONE_POSE_ESTIMATION_MESSAGE_KEYCODE_H

